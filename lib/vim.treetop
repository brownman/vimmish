grammar Vim
  rule main
    (normal_mode / insert_mode / visual_mode / command_mode / motion)+ {
    def eval
        r = []
        elements.each { |e| r += e.eval }
        r
    end
    }
  end
  
  rule normal_mode
    nmode_command_motionless / nmode_command_with_motion
  end

    rule nmode_command_motionless
      times:number? operator:(('x' / 'dd' / 'D' / 'J' / '~') <Command>) {
        def eval 
          r = []
          r << [times.text_value, "#{times.text_value} times: "] unless times.empty?
          r << [operator.text_value, operator.eval] 
        end
        }
    end

    rule nmode_command_with_motion
      # the label is necessary for the optional motion in order to check it
      times:number? command:(operator:nmode_operator_on_selection motion:motion) {
        def eval 
          r = []
          r << [times.text_value, "#{times.text_value} times: "] unless times.empty?
          r << [command.text_value, command.operator.eval + (command.motion.empty? ? '' : " #{command.motion.eval(:command)[1]}")] 
        end
        }
    end
  
  include VimInsert     
  rule insert_mode
    imode / imode_change
  end

    rule imode
      number:number? 
      command:(("i" / "I" / "a" / "A" / "o" / "O" / "s" / "S" / 'C' / 'cc') <Command>) 
      insert_input {
        def eval
          r = []
          r << [number.text_value, "#{number.text_value} times: "] unless number.empty?
          r << [command.text_value, command.eval] 
          r + insert_input.eval
        end
      }
    end
    
    rule imode_change
      command:change_command motion insert_input {
        def eval
          r = []
          r << [command.text_value + motion.text_value, "#{command.eval} #{motion.eval(:command)[1]}"] 
          r + insert_input.eval
        end
      }
    end


  rule visual_mode
    selection:( (c:'v' motions:(motion+)) /  (c:'gv' motions:(motion*)) ) command_for_selection {
      def eval
        r = [[ selection.c.text_value, 
              {
                'v' => 'go to visual mode',
                'gv' => 'restore previous visual selection'
              }[selection.c.text_value]
            ]]
        selection.motions.elements.each do |m|
          r << m.eval(:selection)
        end
        r << command_for_selection.eval
      end
    }
  end

    rule command_for_selection
      command_for_selection_change / command_for_selection_other
    end

      rule command_for_selection_change
          command:change_command insert_input {
            def eval
              r = []
              r << [command.text_value, command.eval('selection')] 
              r + insert_input.eval
            end
          }
        end

        rule change_command
          ('c' / 'c') <Command>
        end

        rule command_for_selection_other
          c:(nmode_operator_on_selection / '~' <Command>) '' {
            def eval
              [c.text_value, c.eval('selection')]
            end
          }
        end

        rule nmode_operator_on_selection
          ('d' / 'y') <Command> 
        end

  include VimCommandRanges
  rule command_mode
    ':' range:range? cmode_command cmode_end {
      def eval
        r = [
          [':', 'go to command mode']
        ]
        r << range.eval unless range.empty?
        r += cmode_command.eval
        r << [cmode_end.text_value, 'execute command and go to normal mode']
      end
    }
  end
  
    rule cmode_command 
      cmode_substitute / cmode_delete
    end
    
      rule cmode_substitute
        's' find:('/' term:[^/]+) replace:('/' term:(!cmode_end .)*) {
          def eval
            [
              ['s', 'substitute'], 
              [find.text_value, 'find ' + find.term.text_value],
              [replace.text_value, 'replace with ' + replace.term.text_value]
            ]
          end
        }
      end
      
      rule cmode_delete
        'd' {
          def eval
            [['d', 'delete range']]
          end
        }
      end

    rule cmode_end
      '<CR>'
    end

  rule motion
      repeatable_motion / parametric_motion / where_motion / zero_motion
  end

    rule repeatable_motion
      quantity:motion_counter?
      motion:(
        'h' / '<LEFT>' / 'j' / '<DOWN>' / 'k' / '<UP>' / 'l' / '<RIGHT>' /
        [wbeBE] / 'g' [eE] / 
        [$^] /
        '('
      ) <Motion>
    end
    
    rule zero_motion
      motion:('0' / '%')
      param:""
      <Motion>
    end

    rule parametric_motion
      quantity:motion_counter?
      motion:('f' / 'F' / 't' / 'T')
      param:[a-zA-Z]
      <ParametricMotion>
    end

    rule where_motion
      where:number? motion:('G' / 'gg') <Macromotion>
    end

    rule motion_counter
      (number / 'a' / 'i') 
    end
      

  rule number
    [1-9] [0-9]*
  end

end
